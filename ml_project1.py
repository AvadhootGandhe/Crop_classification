# -*- coding: utf-8 -*-
"""ML_Project1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/AvadhootGandhe/Crop_classification/blob/main/ML_Project1.ipynb
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("atharvaingle/crop-recommendation-dataset")

print("Path to dataset files:", path)



import pandas as pd
import os
dataset_path = path + '/Crop_recommendation.csv'
df = pd.read_csv(dataset_path)
display(df.head())

"""# Task
Explain the selected code, store the data in a dataframe, and provide code to clean the data.

## Check for missing values

### Subtask:
Identify if there are any missing values in the DataFrame and decide on a strategy to handle them (e.g., imputation, removal).

**Reasoning**:
Calculate and display the number of missing values per column in the DataFrame to identify columns with missing data.
"""

missing_values_count = df.isnull().sum()
display(missing_values_count)

"""## Check for duplicate rows

### Subtask:
Identify and remove any duplicate rows in the DataFrame.

**Reasoning**:
Identify and remove duplicate rows in the DataFrame.
"""

duplicate_rows_count = df.duplicated().sum()
print(f"Number of duplicate rows: {duplicate_rows_count}")
df = df.drop_duplicates()

"""## Check data types

### Subtask:
Verify that the data types of each column are appropriate for analysis.

**Reasoning**:
Print the data types of each column to verify they are appropriate for analysis as per the instructions.
"""

display(df.dtypes)

column_list = df.columns.tolist()
column_list.remove('label')
print(column_list)

from scipy.stats import zscore
for column in column_list:
  df[f'Z score of {column}'] = zscore(df[column])
df.head()

"""## Handle outliers (optional)

### Subtask:
Depending on the data and the goals, you might want to identify and handle outliers in numerical columns.

"""



"""**Reasoning**:
Select the numerical columns, calculate IQR, and define outlier bounds for each, then count outliers.

# Task
Remove rows from the dataframe `df` where the absolute z-score of any numerical column is greater than 3.

## Calculate absolute z-scores

### Subtask:
Compute the absolute Z-score for each of the numerical columns.

**Reasoning**:
Calculate the absolute Z-score for each value in the selected numerical columns and store them in the existing Z-score columns.
"""

for column in column_list:
  df[f'Z score of {column}'] = df[f'Z score of {column}'].abs()
display(df.head())

"""## Identify rows with outliers

### Subtask:
Create a boolean mask to identify rows where the absolute Z-score for any of the numerical columns is greater than 3.

**Reasoning**:
Create a boolean mask to identify rows where the absolute Z-score for any of the numerical columns is greater than 3.
"""

outlier_mask = pd.Series(False, index=df.index)
for column in column_list:
  outlier_mask = outlier_mask | (df[f'Z score of {column}'] > 3)
display(outlier_mask)

"""## Remove outlier rows

### Subtask:
Filter the DataFrame to remove the identified outlier rows.

**Reasoning**:
Filter the DataFrame to keep only the rows where the outlier_mask is False (i.e., not outliers) and display the first few rows of the filtered DataFrame.
"""

df = df[~outlier_mask]
display(df.head())

"""## Verify changes

### Subtask:
Display the shape of the DataFrame before and after removing outliers to confirm the removal.

**Reasoning**:
Display the shape of the DataFrame before and after removing outliers to confirm the removal.
"""

print("Shape of DataFrame after outlier removal:", df.shape)

"""## Summary:

### Data Analysis Key Findings

*   Absolute Z-scores were calculated for each numerical column in the DataFrame.
*   A boolean mask was created to identify rows where the absolute Z-score of any numerical column was greater than 3.
*   Rows identified by the mask as having an absolute Z-score greater than 3 in any numerical column were removed from the DataFrame.
*   The final shape of the DataFrame after removing outliers is (2029, 15).

### Insights or Next Steps

*   The number of rows removed due to the outlier criteria is the difference between the original number of rows and 2029.
*   Consider investigating the characteristics of the removed rows to understand why they were identified as outliers.

"""

updated_column_list=df.columns.tolist()
updated_column_list



df['label'].nunique()

import pandas as pd
import numpy as np

from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report

X = df[['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall']]
y = df['label']
le = LabelEncoder()
y_encoded = le.fit_transform(y)

X_train, X_test, y_train, y_test = train_test_split(
    X, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded)

model = XGBClassifier(
    objective='multi:softmax',
    num_class=22,
    eval_metric='mlogloss',
    use_label_encoder=False,
    max_depth=6,
    n_estimators=100,
    learning_rate=0.1
)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred)*100)
print("\nClassification Report:\n", classification_report(y_test, y_pred, target_names=le.classes_))



"""## Make a prediction on new input

### Subtask:
Define a new input data point and use the trained model to predict the crop label.

**Reasoning**:
Create a pandas DataFrame with the new input values, ensure the column names match the training data, use the trained XGBoost model to predict the encoded label, and then use the `LabelEncoder` to transform the predicted numerical label back into the original crop name.
"""

# Define your new input values
new_input = {
    'N': [55],
    'P': [42],
    'K': [43],
    'temperature': [20.879744],
    'humidity': [40.002744],
    'ph': [6.502985],
    'rainfall': [100.935536]
}
new_input_df = pd.DataFrame(new_input)
predicted_encoded_label = model.predict(new_input_df)
predicted_crop = le.inverse_transform(predicted_encoded_label)

print("Predicted Crop:", predicted_crop[0])


